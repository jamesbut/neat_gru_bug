// aiTools is a free C++ library of AI tools.
// Copyright (C) 2013  Benjamin Schnieders

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program, see file LICENCE.txt.
// Alternativley, see <http://www.gnu.org/licenses/>.

#ifndef __AITOOLS_VECTOR_H_INCLUDED
#define __AITOOLS_VECTOR_H_INCLUDED

#include <Util/MetaprogrammingHelpers.h>
#include <Util/Functors.h>
#include "Distance.h"

#include <functional>

namespace aiTools
{
	namespace Math
	{

		/**
		 * \brief A simple n-d-vector class
		 *
		 * Features overloaded plus and minus operators and a (squared)/length getter.
		 *
		 */
		template <typename T, unsigned int C>
		struct Vector
		{
			typedef T value_type;
			const static std::size_t MaxIndex = C-1;

			Vector()
			{
				for(std::size_t i=0; i<C; ++i)
				{
					data[i] = T(0);
				}
			}

			template <typename OtherType>
			explicit Vector(const OtherType& other)
			{
				for(std::size_t i=0; i<C; ++i)
				{
					data[i] = static_cast<T>(other[i]);
				}
			}

			explicit Vector(do_not_initialize)
			{
			}

			template <typename FwdIter>
			explicit Vector(FwdIter obegin, FwdIter oend)
			{
				T* begin = begin();
				T* end = end();

				while(obegin != oend && begin != end)
				{
					*begin++ = *obegin++;
				}
			}

			T data[C];

			T* begin()
			{
				return &data[0];
			}

			T* end()
			{
				return &data[0];
			}

			const T* begin() const
			{
				return &data[C];
			}

			const T* end() const
			{
				return &data[C];
			}


			T lengthSquared() const
			{
				return euclidean_length_squared(begin(), end());
			}

			T length() const
			{
				return euclidean_length(begin(), end());
			}

			template <typename ReturnType/*=T*/>
			ReturnType length() const
			{
				using std::sqrt;

				T squaredLength = lengthSquared();
				ReturnType conv = static_cast<ReturnType>(squaredLength);
				return sqrt(conv);
			}

			void setLength(T l)
			{
				const T formerLength = length();
				ASSERT(formerLength != 0, "cannot scale vector of zero length");

				*this *= (l / formerLength);
			}

			void normalize()
			{
				setLength(1);
			}

			std::size_t size() const
			{
				return MaxIndex;
			}

			Vector<T, C> getNormalized() const
			{
				Vector<T, C> temp(*this);
				temp.normalize();
				return temp;
			}

			T& operator[](unsigned index)
			{
				return data[index];
			}

			const T& operator[](unsigned index) const
			{
				return data[index];
			}
		};

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator-=(Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			std::minus<T> modifier;
			std::transform(lhs.begin(), lhs.end(), rhs.begin(), lhs.begin(), modifier);
			return lhs;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator+=(Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			std::plus<T> modifier;
			std::transform(lhs.begin(), lhs.end(), rhs.begin(), lhs.begin(), modifier);
			return lhs;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator*=(Vector<T, C>& lhs, const U& rhs)
		{
			ModifyWith<std::multiplies<T>, U> modifier(rhs);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return lhs;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator/=(Vector<T, C>& lhs, const U& rhs)
		{
			ModifyWith<std::divides<T>, U> modifier(rhs);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return lhs;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator-(const Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			std::minus<T> modifier;

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), rhs.begin(), result.begin(), modifier);
			return result;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator+(const Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			std::plus<T> modifier;

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), rhs.begin(), result.begin(), modifier);
			return result;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator*(const Vector<T, C>& lhs, const U& rhs)
		{
			ModifyWith<std::multiplies<T>, U> modifier(rhs);

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return result;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator*(const U& rhs, const Vector<T, C>& lhs)
		{
			ModifyWith<std::multiplies<T>, U> modifier(rhs);

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return result;
		}

		template <typename T, typename U, unsigned int C>
		Vector<T, C>& operator/(const Vector<T, C>& lhs, const U& rhs)
		{
			ModifyWith<std::divides<T>, U> modifier(rhs);

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return result;
		}

		template <typename T, typename U, unsigned int C>
		bool operator==(const Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			return std::equal(lhs.begin(), lhs.end(), rhs.end());
		}

		template <typename T, typename U, unsigned int C>
		bool operator!=(const Vector<T, C>& lhs, const Vector<U, C>& rhs)
		{
			return !std::equal(lhs.begin(), lhs.end(), rhs.end());
		}


		template <typename T, unsigned int C>
		Vector<T, C>& operator-(const Vector<T, C>& lhs)
		{
			std::negate<T> modifier;

			Vector<T, C> result(do_not_initialize);
			std::transform(lhs.begin(), lhs.end(), lhs.begin(), modifier);
			return result;
		}

		template <typename FwdIterType, typename OtherFwdIterType>
		typename FwdIterType::value_type dot_product(FwdIterType beginA, FwdIterType endA, OtherFwdIterType beginB, OtherFwdIterType endB)
		{
			//ensure equal type in both containers
			typedef same_types<typename FwdIterType::value_type, typename OtherFwdIterType::value_type> condition;
			AITOOLS_STATIC_ASSERT(condition::value);

			typename FwdIterType::value_type sum = typename FwdIterType::value_type(0);

			while(beginA != endA && beginB != endB)
			{
				sum += *beginA * *beginB;

				++beginA;
				++beginB;
			}
			return sum;
		}

		template <typename T, unsigned int C>
		typename T::value_type dot_product(const Vector<T, C>& lhs, const Vector<T, C>& rhs)
		{
			return dot_product(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
		}

		template <typename FwdIterType, typename OtherFwdIterType, typename OutputIterType>
		void piecewise_multiplication(FwdIterType beginA, FwdIterType endA, OtherFwdIterType beginB, OutputIterType beginC)
		{
			//ensure equal type in both containers
			typedef same_types<typename FwdIterType::value_type, typename OtherFwdIterType::value_type> condition;
			AITOOLS_STATIC_ASSERT(condition::value);

			std::multiplies<typename FwdIterType::value_type> modifier();
			std::transform(beginA, endA, beginB, beginC, modifier);
		}

		template <typename T, unsigned int C>
		typename T::value_type piecewise_multiplication(const Vector<T, C>& lhs, const Vector<T, C>& rhs)
		{
			Vector<T, C> result(do_not_initialize);
			piecewise_multiplication(lhs.begin(), lhs.end(), rhs.begin(), result.begin());
			return result;
		}

		template <typename FwdIterType>
		typename FwdIterType::value_type sum_elements(FwdIterType beginA, FwdIterType endA)
		{
			typename FwdIterType::value_type sum = typename FwdIterType::value_type(0);

			while(beginA != endA)
			{
				sum += *beginA++;
			}
			return sum;
		}

		template <typename T, unsigned int C>
		typename T::value_type sum_elements(const Vector<T, C>& lhs)
		{
			return sum_elements(lhs.begin(), lhs.end());
		}

		template <typename T, unsigned int C>
		void normalize(Vector<T, C>& lhs)
		{
			T sum = sum_elements(lhs.begin(), lhs.end());
			lhs /= sum;
		}
	}
}

#endif // __AITOOLS_VECTOR_H_INCLUDED
