// aiTools is a free C++ library of AI tools.
// Copyright (C) 2013 - 2015  Benjamin Schnieders

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program, see file LICENCE.txt.
// Alternativley, see <http://www.gnu.org/licenses/>.

#ifndef __AITOOLS_PARALLEL_FOREACH_H_INCLUDED
#define __AITOOLS_PARALLEL_FOREACH_H_INCLUDED

#include "RAIIThread.h"

#include <type_traits>
#include <iterator>
#include <thread>

namespace aiTools
{
	namespace Threading
	{
		std::size_t inline getSuitableNumberOfThreads()
		{
			static const std::size_t suitableNumberOfThreads = std::thread::hardware_concurrency() ? std::thread::hardware_concurrency() : 8;
			return suitableNumberOfThreads;
		}


		template <typename InputIterator, typename Action>
		typename std::enable_if<std::is_same<typename InputIterator::iterator_category, std::random_access_iterator_tag>::value, Action>::type
		parallel_for_each(InputIterator first, InputIterator last, Action action, const std::size_t maxThreads = getSuitableNumberOfThreads())
		{
			ASSERT(maxThreads, "numberOfThreads must not be 0.");
			std::size_t numberOfThreads = std::min(getSuitableNumberOfThreads(), maxThreads);

			const auto count = std::distance(first, last);
			ASSERT(count >= 0, "iterators in wrong order, first should be <= last");

			const auto per_thread = count / numberOfThreads;
			const auto overhang = count % numberOfThreads;

			//prevents creation of additional, empty threads for empty ranges
			const auto countUntil = std::min(static_cast<std::size_t>(count), numberOfThreads);

			std::vector<RAIIThread> workingThreads;

			for(std::size_t i = 0; i< countUntil; ++i)
			{
				auto endOfSegment = first + per_thread + (i < overhang);
				workingThreads.emplace_back(
							[first, endOfSegment, &action]()
							{
								std::for_each(first, endOfSegment, action);
							}
						);

				first = endOfSegment;
			}
			return std::move(action);
		}
	}
}



#endif // __AITOOLS_PARALLEL_FOREACH_H_INCLUDED
